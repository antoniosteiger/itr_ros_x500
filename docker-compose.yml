# Docker Compose file for ITR x500v2 Drone Control & Sim
# Based on: https://github.com/sea-bass/turtlebot3_behavior_demos/blob/main/docker-compose.yaml
#
# Usage:
#
# To build the images:
#   docker compose build
#
# To start up a specific service by name:
#   docker compose up <service_name>
#
# To open an interactive shell to a running container:
#   docker exec -it <container_name> bash

services:
  ###############################################
  # BASE IMAGE
  # ROS2, PX4 and uXRCE DDS Agent
  # Heavy build processes from source
  ###############################################
  base:
    image: itr_x500:base
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        ROS_DISTRO: ${ROS_DISTRO}
        PX4_VERSION: ${PX4_VERSION}
      target: base
    # Interactive shell
    stdin_open: true
    tty: true
    # Networking and IPC for ROS 2
    network_mode: host
    ipc: host
    # Needed to display graphical applications
    privileged: True
    environment:
      # Allows graphical programs in the container.
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1
      - NVIDIA_DRIVER_CAPABILITIES=all
    volumes:
      # Allows graphical programs in the container.
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ${XAUTHORITY:-$HOME/.Xauthority}:/root/.Xauthority


  ######################
  # OVERLAY IMAGE
  # Main ITR source code
  ######################
  overlay:
    extends: base
    image: itr_x500:overlay
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: overlay

  ######################
  # DEV IMAGE
  # Sync Source Code
  ######################
  dev:
    extends: overlay
    image: itr_x500:dev
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: dev
    volumes:
      # Mount workspace sourcecode
      # Utilities:
      - ./itr_sim_x500:/itr_ros_x500/src/itr_sim_x500:rw
      - ./itr_mocap_x500:/itr_ros_x500/src/itr_mocap_x500:rw
      - ./itr_description_x500:/itr_ros_x500/src/itr_description_x500:rw
      - ./itr_px4_x500:/itr_ros_x500/src/itr_px4_x500:rw
      # Main Packages:
      - ./itr_controller_x500:/itr_ros_x500/src/itr_controller_x500:rw
      - ./itr_statemachine_x500:/itr_ros_x500/src/itr_statemachine_x500:rw
      - ./itr_mission_x500:/itr_ros_x500/src/itr_mission_x500:rw
      # Mount colcon build artifacts for faster rebuilds
      - ./.colcon/build/:/itr_ros_x500/build/:rw
      - ./.colcon/install/:/itr_ros_x500/install/:rw
      - ./.colcon/log/:/itr_ros_x500/log/:rw
      # Mount important files:
      - ./itr_description_x500/models/x500_itr.sdf:/root/.simulation-gazebo/models/x500_itr/model.sdf:rw
      - ./itr_description_x500/worlds/itr.sdf:/root/.simulation-gazebo/worlds/itr.sdf:rw
      - ./itr_description_x500/config/1868_x500_itr_sim:/PX4-Autopilot/ROMFS/px4fmu_common/init.d-posix/airframes/1868_x500_itr_sim:rw
      - ./itr_description_x500/config/1868_x500_itr_real:/PX4-Autopilot/ROMFS/px4fmu_common/init.d/airframes/1868_x500_itr_real:rw
    command: sleep infinity


  ## Ground Control Station
  gcs:
    extends: base
    image: itr_x500:gcs
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: gcs
    command: ./usr/local/bin/QGroundControl.AppImage

  ###########################################s
  # LAUNCH IMAGES
  # Start world, px4, simulation, deploy, ...
  ###########################################
  ## Start PX4 Flight Software with ROS bridge
  px4:
    extends: overlay
    working_dir: /PX4-Autopilot
    entrypoint: ["/bin/bash"]
    command: ["-c", "MicroXRCEAgent udp4 -p 8888 & PX4_GZ_STANDALONE=1 PX4_SYS_AUTOSTART=1868 ./build/px4_sitl_default/bin/px4"]

  ## Start World (Gazebo Physics Sim GUI) with ROS bridge
  world:
    extends: overlay
    working_dir: /PX4-gazebo-models
    entrypoint: ["/bin/bash"]
    command: ["-c", "python3 simulation-gazebo --world=itr"] # TODO: prepend appropriate ros-gz-bridge command
    
  ## Deploy to Real Drone
  # itr-real:
  #   extends: overlay
  #   command: >
  #     ros2 launch itr_mission_x500 mission.deploy.py
  #     controller:=${ITR_CONTROLLER}
  #     logging:=${ITR_LOGGING}